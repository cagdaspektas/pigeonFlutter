// Autogenerated from Pigeon (v2.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.anime_list;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AnimeListData {
    private @Nullable Long malId;
    public @Nullable Long getMalId() { return malId; }
    public void setMalId(@Nullable Long setterArg) {
      this.malId = setterArg;
    }

    private @Nullable String url;
    public @Nullable String getUrl() { return url; }
    public void setUrl(@Nullable String setterArg) {
      this.url = setterArg;
    }

    private @Nullable Map<String, Image> images;
    public @Nullable Map<String, Image> getImages() { return images; }
    public void setImages(@Nullable Map<String, Image> setterArg) {
      this.images = setterArg;
    }

    private @Nullable Trailer trailer;
    public @Nullable Trailer getTrailer() { return trailer; }
    public void setTrailer(@Nullable Trailer setterArg) {
      this.trailer = setterArg;
    }

    private @Nullable Boolean approved;
    public @Nullable Boolean getApproved() { return approved; }
    public void setApproved(@Nullable Boolean setterArg) {
      this.approved = setterArg;
    }

    private @Nullable List<Title> titles;
    public @Nullable List<Title> getTitles() { return titles; }
    public void setTitles(@Nullable List<Title> setterArg) {
      this.titles = setterArg;
    }

    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String titleEnglish;
    public @Nullable String getTitleEnglish() { return titleEnglish; }
    public void setTitleEnglish(@Nullable String setterArg) {
      this.titleEnglish = setterArg;
    }

    private @Nullable String titleJapanese;
    public @Nullable String getTitleJapanese() { return titleJapanese; }
    public void setTitleJapanese(@Nullable String setterArg) {
      this.titleJapanese = setterArg;
    }

    private @Nullable List<String> titleSynonyms;
    public @Nullable List<String> getTitleSynonyms() { return titleSynonyms; }
    public void setTitleSynonyms(@Nullable List<String> setterArg) {
      this.titleSynonyms = setterArg;
    }

    private @Nullable String type;
    public @Nullable String getType() { return type; }
    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable String source;
    public @Nullable String getSource() { return source; }
    public void setSource(@Nullable String setterArg) {
      this.source = setterArg;
    }

    private @Nullable Long episodes;
    public @Nullable Long getEpisodes() { return episodes; }
    public void setEpisodes(@Nullable Long setterArg) {
      this.episodes = setterArg;
    }

    private @Nullable String status;
    public @Nullable String getStatus() { return status; }
    public void setStatus(@Nullable String setterArg) {
      this.status = setterArg;
    }

    private @Nullable Boolean airing;
    public @Nullable Boolean getAiring() { return airing; }
    public void setAiring(@Nullable Boolean setterArg) {
      this.airing = setterArg;
    }

    private @Nullable Aired aired;
    public @Nullable Aired getAired() { return aired; }
    public void setAired(@Nullable Aired setterArg) {
      this.aired = setterArg;
    }

    private @Nullable String duration;
    public @Nullable String getDuration() { return duration; }
    public void setDuration(@Nullable String setterArg) {
      this.duration = setterArg;
    }

    private @Nullable String rating;
    public @Nullable String getRating() { return rating; }
    public void setRating(@Nullable String setterArg) {
      this.rating = setterArg;
    }

    private @Nullable Double score;
    public @Nullable Double getScore() { return score; }
    public void setScore(@Nullable Double setterArg) {
      this.score = setterArg;
    }

    private @Nullable Long scoredBy;
    public @Nullable Long getScoredBy() { return scoredBy; }
    public void setScoredBy(@Nullable Long setterArg) {
      this.scoredBy = setterArg;
    }

    private @Nullable Long rank;
    public @Nullable Long getRank() { return rank; }
    public void setRank(@Nullable Long setterArg) {
      this.rank = setterArg;
    }

    private @Nullable Long popularity;
    public @Nullable Long getPopularity() { return popularity; }
    public void setPopularity(@Nullable Long setterArg) {
      this.popularity = setterArg;
    }

    private @Nullable Long members;
    public @Nullable Long getMembers() { return members; }
    public void setMembers(@Nullable Long setterArg) {
      this.members = setterArg;
    }

    private @Nullable Long favorites;
    public @Nullable Long getFavorites() { return favorites; }
    public void setFavorites(@Nullable Long setterArg) {
      this.favorites = setterArg;
    }

    private @Nullable String synopsis;
    public @Nullable String getSynopsis() { return synopsis; }
    public void setSynopsis(@Nullable String setterArg) {
      this.synopsis = setterArg;
    }

    private @Nullable String background;
    public @Nullable String getBackground() { return background; }
    public void setBackground(@Nullable String setterArg) {
      this.background = setterArg;
    }

    private @Nullable String season;
    public @Nullable String getSeason() { return season; }
    public void setSeason(@Nullable String setterArg) {
      this.season = setterArg;
    }

    private @Nullable Long year;
    public @Nullable Long getYear() { return year; }
    public void setYear(@Nullable Long setterArg) {
      this.year = setterArg;
    }

    private @Nullable Broadcast broadcast;
    public @Nullable Broadcast getBroadcast() { return broadcast; }
    public void setBroadcast(@Nullable Broadcast setterArg) {
      this.broadcast = setterArg;
    }

    private @Nullable List<Demographic> producers;
    public @Nullable List<Demographic> getProducers() { return producers; }
    public void setProducers(@Nullable List<Demographic> setterArg) {
      this.producers = setterArg;
    }

    private @Nullable List<Demographic> licensors;
    public @Nullable List<Demographic> getLicensors() { return licensors; }
    public void setLicensors(@Nullable List<Demographic> setterArg) {
      this.licensors = setterArg;
    }

    private @Nullable List<Demographic> studios;
    public @Nullable List<Demographic> getStudios() { return studios; }
    public void setStudios(@Nullable List<Demographic> setterArg) {
      this.studios = setterArg;
    }

    private @Nullable List<Demographic> genres;
    public @Nullable List<Demographic> getGenres() { return genres; }
    public void setGenres(@Nullable List<Demographic> setterArg) {
      this.genres = setterArg;
    }

    private @Nullable List<Demographic> explicitGenres;
    public @Nullable List<Demographic> getExplicitGenres() { return explicitGenres; }
    public void setExplicitGenres(@Nullable List<Demographic> setterArg) {
      this.explicitGenres = setterArg;
    }

    private @Nullable List<Demographic> themes;
    public @Nullable List<Demographic> getThemes() { return themes; }
    public void setThemes(@Nullable List<Demographic> setterArg) {
      this.themes = setterArg;
    }

    private @Nullable List<Demographic> demographics;
    public @Nullable List<Demographic> getDemographics() { return demographics; }
    public void setDemographics(@Nullable List<Demographic> setterArg) {
      this.demographics = setterArg;
    }

    public static final class Builder {
      private @Nullable Long malId;
      public @NonNull Builder setMalId(@Nullable Long setterArg) {
        this.malId = setterArg;
        return this;
      }
      private @Nullable String url;
      public @NonNull Builder setUrl(@Nullable String setterArg) {
        this.url = setterArg;
        return this;
      }
      private @Nullable Map<String, Image> images;
      public @NonNull Builder setImages(@Nullable Map<String, Image> setterArg) {
        this.images = setterArg;
        return this;
      }
      private @Nullable Trailer trailer;
      public @NonNull Builder setTrailer(@Nullable Trailer setterArg) {
        this.trailer = setterArg;
        return this;
      }
      private @Nullable Boolean approved;
      public @NonNull Builder setApproved(@Nullable Boolean setterArg) {
        this.approved = setterArg;
        return this;
      }
      private @Nullable List<Title> titles;
      public @NonNull Builder setTitles(@Nullable List<Title> setterArg) {
        this.titles = setterArg;
        return this;
      }
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable String titleEnglish;
      public @NonNull Builder setTitleEnglish(@Nullable String setterArg) {
        this.titleEnglish = setterArg;
        return this;
      }
      private @Nullable String titleJapanese;
      public @NonNull Builder setTitleJapanese(@Nullable String setterArg) {
        this.titleJapanese = setterArg;
        return this;
      }
      private @Nullable List<String> titleSynonyms;
      public @NonNull Builder setTitleSynonyms(@Nullable List<String> setterArg) {
        this.titleSynonyms = setterArg;
        return this;
      }
      private @Nullable String type;
      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable String source;
      public @NonNull Builder setSource(@Nullable String setterArg) {
        this.source = setterArg;
        return this;
      }
      private @Nullable Long episodes;
      public @NonNull Builder setEpisodes(@Nullable Long setterArg) {
        this.episodes = setterArg;
        return this;
      }
      private @Nullable String status;
      public @NonNull Builder setStatus(@Nullable String setterArg) {
        this.status = setterArg;
        return this;
      }
      private @Nullable Boolean airing;
      public @NonNull Builder setAiring(@Nullable Boolean setterArg) {
        this.airing = setterArg;
        return this;
      }
      private @Nullable Aired aired;
      public @NonNull Builder setAired(@Nullable Aired setterArg) {
        this.aired = setterArg;
        return this;
      }
      private @Nullable String duration;
      public @NonNull Builder setDuration(@Nullable String setterArg) {
        this.duration = setterArg;
        return this;
      }
      private @Nullable String rating;
      public @NonNull Builder setRating(@Nullable String setterArg) {
        this.rating = setterArg;
        return this;
      }
      private @Nullable Double score;
      public @NonNull Builder setScore(@Nullable Double setterArg) {
        this.score = setterArg;
        return this;
      }
      private @Nullable Long scoredBy;
      public @NonNull Builder setScoredBy(@Nullable Long setterArg) {
        this.scoredBy = setterArg;
        return this;
      }
      private @Nullable Long rank;
      public @NonNull Builder setRank(@Nullable Long setterArg) {
        this.rank = setterArg;
        return this;
      }
      private @Nullable Long popularity;
      public @NonNull Builder setPopularity(@Nullable Long setterArg) {
        this.popularity = setterArg;
        return this;
      }
      private @Nullable Long members;
      public @NonNull Builder setMembers(@Nullable Long setterArg) {
        this.members = setterArg;
        return this;
      }
      private @Nullable Long favorites;
      public @NonNull Builder setFavorites(@Nullable Long setterArg) {
        this.favorites = setterArg;
        return this;
      }
      private @Nullable String synopsis;
      public @NonNull Builder setSynopsis(@Nullable String setterArg) {
        this.synopsis = setterArg;
        return this;
      }
      private @Nullable String background;
      public @NonNull Builder setBackground(@Nullable String setterArg) {
        this.background = setterArg;
        return this;
      }
      private @Nullable String season;
      public @NonNull Builder setSeason(@Nullable String setterArg) {
        this.season = setterArg;
        return this;
      }
      private @Nullable Long year;
      public @NonNull Builder setYear(@Nullable Long setterArg) {
        this.year = setterArg;
        return this;
      }
      private @Nullable Broadcast broadcast;
      public @NonNull Builder setBroadcast(@Nullable Broadcast setterArg) {
        this.broadcast = setterArg;
        return this;
      }
      private @Nullable List<Demographic> producers;
      public @NonNull Builder setProducers(@Nullable List<Demographic> setterArg) {
        this.producers = setterArg;
        return this;
      }
      private @Nullable List<Demographic> licensors;
      public @NonNull Builder setLicensors(@Nullable List<Demographic> setterArg) {
        this.licensors = setterArg;
        return this;
      }
      private @Nullable List<Demographic> studios;
      public @NonNull Builder setStudios(@Nullable List<Demographic> setterArg) {
        this.studios = setterArg;
        return this;
      }
      private @Nullable List<Demographic> genres;
      public @NonNull Builder setGenres(@Nullable List<Demographic> setterArg) {
        this.genres = setterArg;
        return this;
      }
      private @Nullable List<Demographic> explicitGenres;
      public @NonNull Builder setExplicitGenres(@Nullable List<Demographic> setterArg) {
        this.explicitGenres = setterArg;
        return this;
      }
      private @Nullable List<Demographic> themes;
      public @NonNull Builder setThemes(@Nullable List<Demographic> setterArg) {
        this.themes = setterArg;
        return this;
      }
      private @Nullable List<Demographic> demographics;
      public @NonNull Builder setDemographics(@Nullable List<Demographic> setterArg) {
        this.demographics = setterArg;
        return this;
      }
      public @NonNull AnimeListData build() {
        AnimeListData pigeonReturn = new AnimeListData();
        pigeonReturn.setMalId(malId);
        pigeonReturn.setUrl(url);
        pigeonReturn.setImages(images);
        pigeonReturn.setTrailer(trailer);
        pigeonReturn.setApproved(approved);
        pigeonReturn.setTitles(titles);
        pigeonReturn.setTitle(title);
        pigeonReturn.setTitleEnglish(titleEnglish);
        pigeonReturn.setTitleJapanese(titleJapanese);
        pigeonReturn.setTitleSynonyms(titleSynonyms);
        pigeonReturn.setType(type);
        pigeonReturn.setSource(source);
        pigeonReturn.setEpisodes(episodes);
        pigeonReturn.setStatus(status);
        pigeonReturn.setAiring(airing);
        pigeonReturn.setAired(aired);
        pigeonReturn.setDuration(duration);
        pigeonReturn.setRating(rating);
        pigeonReturn.setScore(score);
        pigeonReturn.setScoredBy(scoredBy);
        pigeonReturn.setRank(rank);
        pigeonReturn.setPopularity(popularity);
        pigeonReturn.setMembers(members);
        pigeonReturn.setFavorites(favorites);
        pigeonReturn.setSynopsis(synopsis);
        pigeonReturn.setBackground(background);
        pigeonReturn.setSeason(season);
        pigeonReturn.setYear(year);
        pigeonReturn.setBroadcast(broadcast);
        pigeonReturn.setProducers(producers);
        pigeonReturn.setLicensors(licensors);
        pigeonReturn.setStudios(studios);
        pigeonReturn.setGenres(genres);
        pigeonReturn.setExplicitGenres(explicitGenres);
        pigeonReturn.setThemes(themes);
        pigeonReturn.setDemographics(demographics);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("malId", malId);
      toMapResult.put("url", url);
      toMapResult.put("images", images);
      toMapResult.put("trailer", (trailer == null) ? null : trailer.toMap());
      toMapResult.put("approved", approved);
      toMapResult.put("titles", titles);
      toMapResult.put("title", title);
      toMapResult.put("titleEnglish", titleEnglish);
      toMapResult.put("titleJapanese", titleJapanese);
      toMapResult.put("titleSynonyms", titleSynonyms);
      toMapResult.put("type", type);
      toMapResult.put("source", source);
      toMapResult.put("episodes", episodes);
      toMapResult.put("status", status);
      toMapResult.put("airing", airing);
      toMapResult.put("aired", (aired == null) ? null : aired.toMap());
      toMapResult.put("duration", duration);
      toMapResult.put("rating", rating);
      toMapResult.put("score", score);
      toMapResult.put("scoredBy", scoredBy);
      toMapResult.put("rank", rank);
      toMapResult.put("popularity", popularity);
      toMapResult.put("members", members);
      toMapResult.put("favorites", favorites);
      toMapResult.put("synopsis", synopsis);
      toMapResult.put("background", background);
      toMapResult.put("season", season);
      toMapResult.put("year", year);
      toMapResult.put("broadcast", (broadcast == null) ? null : broadcast.toMap());
      toMapResult.put("producers", producers);
      toMapResult.put("licensors", licensors);
      toMapResult.put("studios", studios);
      toMapResult.put("genres", genres);
      toMapResult.put("explicitGenres", explicitGenres);
      toMapResult.put("themes", themes);
      toMapResult.put("demographics", demographics);
      return toMapResult;
    }
    static @NonNull AnimeListData fromMap(@NonNull Map<String, Object> map) {
      AnimeListData pigeonResult = new AnimeListData();
      Object malId = map.get("malId");
      pigeonResult.setMalId((malId == null) ? null : ((malId instanceof Integer) ? (Integer)malId : (Long)malId));
      Object url = map.get("url");
      pigeonResult.setUrl((String)url);
      Object images = map.get("images");
      pigeonResult.setImages((Map<String, Image>)images);
      Object trailer = map.get("trailer");
      pigeonResult.setTrailer((trailer == null) ? null : Trailer.fromMap((Map)trailer));
      Object approved = map.get("approved");
      pigeonResult.setApproved((Boolean)approved);
      Object titles = map.get("titles");
      pigeonResult.setTitles((List<Title>)titles);
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object titleEnglish = map.get("titleEnglish");
      pigeonResult.setTitleEnglish((String)titleEnglish);
      Object titleJapanese = map.get("titleJapanese");
      pigeonResult.setTitleJapanese((String)titleJapanese);
      Object titleSynonyms = map.get("titleSynonyms");
      pigeonResult.setTitleSynonyms((List<String>)titleSynonyms);
      Object type = map.get("type");
      pigeonResult.setType((String)type);
      Object source = map.get("source");
      pigeonResult.setSource((String)source);
      Object episodes = map.get("episodes");
      pigeonResult.setEpisodes((episodes == null) ? null : ((episodes instanceof Integer) ? (Integer)episodes : (Long)episodes));
      Object status = map.get("status");
      pigeonResult.setStatus((String)status);
      Object airing = map.get("airing");
      pigeonResult.setAiring((Boolean)airing);
      Object aired = map.get("aired");
      pigeonResult.setAired((aired == null) ? null : Aired.fromMap((Map)aired));
      Object duration = map.get("duration");
      pigeonResult.setDuration((String)duration);
      Object rating = map.get("rating");
      pigeonResult.setRating((String)rating);
      Object score = map.get("score");
      pigeonResult.setScore((Double)score);
      Object scoredBy = map.get("scoredBy");
      pigeonResult.setScoredBy((scoredBy == null) ? null : ((scoredBy instanceof Integer) ? (Integer)scoredBy : (Long)scoredBy));
      Object rank = map.get("rank");
      pigeonResult.setRank((rank == null) ? null : ((rank instanceof Integer) ? (Integer)rank : (Long)rank));
      Object popularity = map.get("popularity");
      pigeonResult.setPopularity((popularity == null) ? null : ((popularity instanceof Integer) ? (Integer)popularity : (Long)popularity));
      Object members = map.get("members");
      pigeonResult.setMembers((members == null) ? null : ((members instanceof Integer) ? (Integer)members : (Long)members));
      Object favorites = map.get("favorites");
      pigeonResult.setFavorites((favorites == null) ? null : ((favorites instanceof Integer) ? (Integer)favorites : (Long)favorites));
      Object synopsis = map.get("synopsis");
      pigeonResult.setSynopsis((String)synopsis);
      Object background = map.get("background");
      pigeonResult.setBackground((String)background);
      Object season = map.get("season");
      pigeonResult.setSeason((String)season);
      Object year = map.get("year");
      pigeonResult.setYear((year == null) ? null : ((year instanceof Integer) ? (Integer)year : (Long)year));
      Object broadcast = map.get("broadcast");
      pigeonResult.setBroadcast((broadcast == null) ? null : Broadcast.fromMap((Map)broadcast));
      Object producers = map.get("producers");
      pigeonResult.setProducers((List<Demographic>)producers);
      Object licensors = map.get("licensors");
      pigeonResult.setLicensors((List<Demographic>)licensors);
      Object studios = map.get("studios");
      pigeonResult.setStudios((List<Demographic>)studios);
      Object genres = map.get("genres");
      pigeonResult.setGenres((List<Demographic>)genres);
      Object explicitGenres = map.get("explicitGenres");
      pigeonResult.setExplicitGenres((List<Demographic>)explicitGenres);
      Object themes = map.get("themes");
      pigeonResult.setThemes((List<Demographic>)themes);
      Object demographics = map.get("demographics");
      pigeonResult.setDemographics((List<Demographic>)demographics);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Aired {
    private @Nullable String from;
    public @Nullable String getFrom() { return from; }
    public void setFrom(@Nullable String setterArg) {
      this.from = setterArg;
    }

    private @Nullable String to;
    public @Nullable String getTo() { return to; }
    public void setTo(@Nullable String setterArg) {
      this.to = setterArg;
    }

    private @Nullable Prop prop;
    public @Nullable Prop getProp() { return prop; }
    public void setProp(@Nullable Prop setterArg) {
      this.prop = setterArg;
    }

    private @Nullable String string;
    public @Nullable String getString() { return string; }
    public void setString(@Nullable String setterArg) {
      this.string = setterArg;
    }

    public static final class Builder {
      private @Nullable String from;
      public @NonNull Builder setFrom(@Nullable String setterArg) {
        this.from = setterArg;
        return this;
      }
      private @Nullable String to;
      public @NonNull Builder setTo(@Nullable String setterArg) {
        this.to = setterArg;
        return this;
      }
      private @Nullable Prop prop;
      public @NonNull Builder setProp(@Nullable Prop setterArg) {
        this.prop = setterArg;
        return this;
      }
      private @Nullable String string;
      public @NonNull Builder setString(@Nullable String setterArg) {
        this.string = setterArg;
        return this;
      }
      public @NonNull Aired build() {
        Aired pigeonReturn = new Aired();
        pigeonReturn.setFrom(from);
        pigeonReturn.setTo(to);
        pigeonReturn.setProp(prop);
        pigeonReturn.setString(string);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("from", from);
      toMapResult.put("to", to);
      toMapResult.put("prop", (prop == null) ? null : prop.toMap());
      toMapResult.put("string", string);
      return toMapResult;
    }
    static @NonNull Aired fromMap(@NonNull Map<String, Object> map) {
      Aired pigeonResult = new Aired();
      Object from = map.get("from");
      pigeonResult.setFrom((String)from);
      Object to = map.get("to");
      pigeonResult.setTo((String)to);
      Object prop = map.get("prop");
      pigeonResult.setProp((prop == null) ? null : Prop.fromMap((Map)prop));
      Object string = map.get("string");
      pigeonResult.setString((String)string);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Prop {
    private @Nullable From from;
    public @Nullable From getFrom() { return from; }
    public void setFrom(@Nullable From setterArg) {
      this.from = setterArg;
    }

    private @Nullable To to;
    public @Nullable To getTo() { return to; }
    public void setTo(@Nullable To setterArg) {
      this.to = setterArg;
    }

    public static final class Builder {
      private @Nullable From from;
      public @NonNull Builder setFrom(@Nullable From setterArg) {
        this.from = setterArg;
        return this;
      }
      private @Nullable To to;
      public @NonNull Builder setTo(@Nullable To setterArg) {
        this.to = setterArg;
        return this;
      }
      public @NonNull Prop build() {
        Prop pigeonReturn = new Prop();
        pigeonReturn.setFrom(from);
        pigeonReturn.setTo(to);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("from", (from == null) ? null : from.toMap());
      toMapResult.put("to", (to == null) ? null : to.toMap());
      return toMapResult;
    }
    static @NonNull Prop fromMap(@NonNull Map<String, Object> map) {
      Prop pigeonResult = new Prop();
      Object from = map.get("from");
      pigeonResult.setFrom((from == null) ? null : From.fromMap((Map)from));
      Object to = map.get("to");
      pigeonResult.setTo((to == null) ? null : To.fromMap((Map)to));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class From {
    private @Nullable Long day;
    public @Nullable Long getDay() { return day; }
    public void setDay(@Nullable Long setterArg) {
      this.day = setterArg;
    }

    private @Nullable Long month;
    public @Nullable Long getMonth() { return month; }
    public void setMonth(@Nullable Long setterArg) {
      this.month = setterArg;
    }

    private @Nullable Long year;
    public @Nullable Long getYear() { return year; }
    public void setYear(@Nullable Long setterArg) {
      this.year = setterArg;
    }

    public static final class Builder {
      private @Nullable Long day;
      public @NonNull Builder setDay(@Nullable Long setterArg) {
        this.day = setterArg;
        return this;
      }
      private @Nullable Long month;
      public @NonNull Builder setMonth(@Nullable Long setterArg) {
        this.month = setterArg;
        return this;
      }
      private @Nullable Long year;
      public @NonNull Builder setYear(@Nullable Long setterArg) {
        this.year = setterArg;
        return this;
      }
      public @NonNull From build() {
        From pigeonReturn = new From();
        pigeonReturn.setDay(day);
        pigeonReturn.setMonth(month);
        pigeonReturn.setYear(year);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("day", day);
      toMapResult.put("month", month);
      toMapResult.put("year", year);
      return toMapResult;
    }
    static @NonNull From fromMap(@NonNull Map<String, Object> map) {
      From pigeonResult = new From();
      Object day = map.get("day");
      pigeonResult.setDay((day == null) ? null : ((day instanceof Integer) ? (Integer)day : (Long)day));
      Object month = map.get("month");
      pigeonResult.setMonth((month == null) ? null : ((month instanceof Integer) ? (Integer)month : (Long)month));
      Object year = map.get("year");
      pigeonResult.setYear((year == null) ? null : ((year instanceof Integer) ? (Integer)year : (Long)year));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class To {
    private @Nullable Long day;
    public @Nullable Long getDay() { return day; }
    public void setDay(@Nullable Long setterArg) {
      this.day = setterArg;
    }

    private @Nullable Long month;
    public @Nullable Long getMonth() { return month; }
    public void setMonth(@Nullable Long setterArg) {
      this.month = setterArg;
    }

    private @Nullable Long year;
    public @Nullable Long getYear() { return year; }
    public void setYear(@Nullable Long setterArg) {
      this.year = setterArg;
    }

    public static final class Builder {
      private @Nullable Long day;
      public @NonNull Builder setDay(@Nullable Long setterArg) {
        this.day = setterArg;
        return this;
      }
      private @Nullable Long month;
      public @NonNull Builder setMonth(@Nullable Long setterArg) {
        this.month = setterArg;
        return this;
      }
      private @Nullable Long year;
      public @NonNull Builder setYear(@Nullable Long setterArg) {
        this.year = setterArg;
        return this;
      }
      public @NonNull To build() {
        To pigeonReturn = new To();
        pigeonReturn.setDay(day);
        pigeonReturn.setMonth(month);
        pigeonReturn.setYear(year);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("day", day);
      toMapResult.put("month", month);
      toMapResult.put("year", year);
      return toMapResult;
    }
    static @NonNull To fromMap(@NonNull Map<String, Object> map) {
      To pigeonResult = new To();
      Object day = map.get("day");
      pigeonResult.setDay((day == null) ? null : ((day instanceof Integer) ? (Integer)day : (Long)day));
      Object month = map.get("month");
      pigeonResult.setMonth((month == null) ? null : ((month instanceof Integer) ? (Integer)month : (Long)month));
      Object year = map.get("year");
      pigeonResult.setYear((year == null) ? null : ((year instanceof Integer) ? (Integer)year : (Long)year));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Broadcast {
    private @Nullable String day;
    public @Nullable String getDay() { return day; }
    public void setDay(@Nullable String setterArg) {
      this.day = setterArg;
    }

    private @Nullable String time;
    public @Nullable String getTime() { return time; }
    public void setTime(@Nullable String setterArg) {
      this.time = setterArg;
    }

    private @Nullable String timezone;
    public @Nullable String getTimezone() { return timezone; }
    public void setTimezone(@Nullable String setterArg) {
      this.timezone = setterArg;
    }

    private @Nullable String string;
    public @Nullable String getString() { return string; }
    public void setString(@Nullable String setterArg) {
      this.string = setterArg;
    }

    public static final class Builder {
      private @Nullable String day;
      public @NonNull Builder setDay(@Nullable String setterArg) {
        this.day = setterArg;
        return this;
      }
      private @Nullable String time;
      public @NonNull Builder setTime(@Nullable String setterArg) {
        this.time = setterArg;
        return this;
      }
      private @Nullable String timezone;
      public @NonNull Builder setTimezone(@Nullable String setterArg) {
        this.timezone = setterArg;
        return this;
      }
      private @Nullable String string;
      public @NonNull Builder setString(@Nullable String setterArg) {
        this.string = setterArg;
        return this;
      }
      public @NonNull Broadcast build() {
        Broadcast pigeonReturn = new Broadcast();
        pigeonReturn.setDay(day);
        pigeonReturn.setTime(time);
        pigeonReturn.setTimezone(timezone);
        pigeonReturn.setString(string);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("day", day);
      toMapResult.put("time", time);
      toMapResult.put("timezone", timezone);
      toMapResult.put("string", string);
      return toMapResult;
    }
    static @NonNull Broadcast fromMap(@NonNull Map<String, Object> map) {
      Broadcast pigeonResult = new Broadcast();
      Object day = map.get("day");
      pigeonResult.setDay((String)day);
      Object time = map.get("time");
      pigeonResult.setTime((String)time);
      Object timezone = map.get("timezone");
      pigeonResult.setTimezone((String)timezone);
      Object string = map.get("string");
      pigeonResult.setString((String)string);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Demographic {
    private @Nullable Long malId;
    public @Nullable Long getMalId() { return malId; }
    public void setMalId(@Nullable Long setterArg) {
      this.malId = setterArg;
    }

    private @Nullable String type;
    public @Nullable String getType() { return type; }
    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String url;
    public @Nullable String getUrl() { return url; }
    public void setUrl(@Nullable String setterArg) {
      this.url = setterArg;
    }

    public static final class Builder {
      private @Nullable Long malId;
      public @NonNull Builder setMalId(@Nullable Long setterArg) {
        this.malId = setterArg;
        return this;
      }
      private @Nullable String type;
      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String url;
      public @NonNull Builder setUrl(@Nullable String setterArg) {
        this.url = setterArg;
        return this;
      }
      public @NonNull Demographic build() {
        Demographic pigeonReturn = new Demographic();
        pigeonReturn.setMalId(malId);
        pigeonReturn.setType(type);
        pigeonReturn.setName(name);
        pigeonReturn.setUrl(url);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("malId", malId);
      toMapResult.put("type", type);
      toMapResult.put("name", name);
      toMapResult.put("url", url);
      return toMapResult;
    }
    static @NonNull Demographic fromMap(@NonNull Map<String, Object> map) {
      Demographic pigeonResult = new Demographic();
      Object malId = map.get("malId");
      pigeonResult.setMalId((malId == null) ? null : ((malId instanceof Integer) ? (Integer)malId : (Long)malId));
      Object type = map.get("type");
      pigeonResult.setType((String)type);
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object url = map.get("url");
      pigeonResult.setUrl((String)url);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Image {
    private @Nullable String imageUrl;
    public @Nullable String getImageUrl() { return imageUrl; }
    public void setImageUrl(@Nullable String setterArg) {
      this.imageUrl = setterArg;
    }

    private @Nullable String smallImageUrl;
    public @Nullable String getSmallImageUrl() { return smallImageUrl; }
    public void setSmallImageUrl(@Nullable String setterArg) {
      this.smallImageUrl = setterArg;
    }

    private @Nullable String largeImageUrl;
    public @Nullable String getLargeImageUrl() { return largeImageUrl; }
    public void setLargeImageUrl(@Nullable String setterArg) {
      this.largeImageUrl = setterArg;
    }

    public static final class Builder {
      private @Nullable String imageUrl;
      public @NonNull Builder setImageUrl(@Nullable String setterArg) {
        this.imageUrl = setterArg;
        return this;
      }
      private @Nullable String smallImageUrl;
      public @NonNull Builder setSmallImageUrl(@Nullable String setterArg) {
        this.smallImageUrl = setterArg;
        return this;
      }
      private @Nullable String largeImageUrl;
      public @NonNull Builder setLargeImageUrl(@Nullable String setterArg) {
        this.largeImageUrl = setterArg;
        return this;
      }
      public @NonNull Image build() {
        Image pigeonReturn = new Image();
        pigeonReturn.setImageUrl(imageUrl);
        pigeonReturn.setSmallImageUrl(smallImageUrl);
        pigeonReturn.setLargeImageUrl(largeImageUrl);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("imageUrl", imageUrl);
      toMapResult.put("smallImageUrl", smallImageUrl);
      toMapResult.put("largeImageUrl", largeImageUrl);
      return toMapResult;
    }
    static @NonNull Image fromMap(@NonNull Map<String, Object> map) {
      Image pigeonResult = new Image();
      Object imageUrl = map.get("imageUrl");
      pigeonResult.setImageUrl((String)imageUrl);
      Object smallImageUrl = map.get("smallImageUrl");
      pigeonResult.setSmallImageUrl((String)smallImageUrl);
      Object largeImageUrl = map.get("largeImageUrl");
      pigeonResult.setLargeImageUrl((String)largeImageUrl);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Title {
    private @Nullable String type;
    public @Nullable String getType() { return type; }
    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    public static final class Builder {
      private @Nullable String type;
      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      public @NonNull Title build() {
        Title pigeonReturn = new Title();
        pigeonReturn.setType(type);
        pigeonReturn.setTitle(title);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("type", type);
      toMapResult.put("title", title);
      return toMapResult;
    }
    static @NonNull Title fromMap(@NonNull Map<String, Object> map) {
      Title pigeonResult = new Title();
      Object type = map.get("type");
      pigeonResult.setType((String)type);
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Trailer {
    private @Nullable String youtubeId;
    public @Nullable String getYoutubeId() { return youtubeId; }
    public void setYoutubeId(@Nullable String setterArg) {
      this.youtubeId = setterArg;
    }

    private @Nullable String url;
    public @Nullable String getUrl() { return url; }
    public void setUrl(@Nullable String setterArg) {
      this.url = setterArg;
    }

    private @Nullable String embedUrl;
    public @Nullable String getEmbedUrl() { return embedUrl; }
    public void setEmbedUrl(@Nullable String setterArg) {
      this.embedUrl = setterArg;
    }

    private @Nullable Images images;
    public @Nullable Images getImages() { return images; }
    public void setImages(@Nullable Images setterArg) {
      this.images = setterArg;
    }

    public static final class Builder {
      private @Nullable String youtubeId;
      public @NonNull Builder setYoutubeId(@Nullable String setterArg) {
        this.youtubeId = setterArg;
        return this;
      }
      private @Nullable String url;
      public @NonNull Builder setUrl(@Nullable String setterArg) {
        this.url = setterArg;
        return this;
      }
      private @Nullable String embedUrl;
      public @NonNull Builder setEmbedUrl(@Nullable String setterArg) {
        this.embedUrl = setterArg;
        return this;
      }
      private @Nullable Images images;
      public @NonNull Builder setImages(@Nullable Images setterArg) {
        this.images = setterArg;
        return this;
      }
      public @NonNull Trailer build() {
        Trailer pigeonReturn = new Trailer();
        pigeonReturn.setYoutubeId(youtubeId);
        pigeonReturn.setUrl(url);
        pigeonReturn.setEmbedUrl(embedUrl);
        pigeonReturn.setImages(images);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("youtubeId", youtubeId);
      toMapResult.put("url", url);
      toMapResult.put("embedUrl", embedUrl);
      toMapResult.put("images", (images == null) ? null : images.toMap());
      return toMapResult;
    }
    static @NonNull Trailer fromMap(@NonNull Map<String, Object> map) {
      Trailer pigeonResult = new Trailer();
      Object youtubeId = map.get("youtubeId");
      pigeonResult.setYoutubeId((String)youtubeId);
      Object url = map.get("url");
      pigeonResult.setUrl((String)url);
      Object embedUrl = map.get("embedUrl");
      pigeonResult.setEmbedUrl((String)embedUrl);
      Object images = map.get("images");
      pigeonResult.setImages((images == null) ? null : Images.fromMap((Map)images));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Images {
    private @Nullable String imageUrl;
    public @Nullable String getImageUrl() { return imageUrl; }
    public void setImageUrl(@Nullable String setterArg) {
      this.imageUrl = setterArg;
    }

    private @Nullable String smallImageUrl;
    public @Nullable String getSmallImageUrl() { return smallImageUrl; }
    public void setSmallImageUrl(@Nullable String setterArg) {
      this.smallImageUrl = setterArg;
    }

    private @Nullable String mediumImageUrl;
    public @Nullable String getMediumImageUrl() { return mediumImageUrl; }
    public void setMediumImageUrl(@Nullable String setterArg) {
      this.mediumImageUrl = setterArg;
    }

    private @Nullable String largeImageUrl;
    public @Nullable String getLargeImageUrl() { return largeImageUrl; }
    public void setLargeImageUrl(@Nullable String setterArg) {
      this.largeImageUrl = setterArg;
    }

    private @Nullable String maximumImageUrl;
    public @Nullable String getMaximumImageUrl() { return maximumImageUrl; }
    public void setMaximumImageUrl(@Nullable String setterArg) {
      this.maximumImageUrl = setterArg;
    }

    public static final class Builder {
      private @Nullable String imageUrl;
      public @NonNull Builder setImageUrl(@Nullable String setterArg) {
        this.imageUrl = setterArg;
        return this;
      }
      private @Nullable String smallImageUrl;
      public @NonNull Builder setSmallImageUrl(@Nullable String setterArg) {
        this.smallImageUrl = setterArg;
        return this;
      }
      private @Nullable String mediumImageUrl;
      public @NonNull Builder setMediumImageUrl(@Nullable String setterArg) {
        this.mediumImageUrl = setterArg;
        return this;
      }
      private @Nullable String largeImageUrl;
      public @NonNull Builder setLargeImageUrl(@Nullable String setterArg) {
        this.largeImageUrl = setterArg;
        return this;
      }
      private @Nullable String maximumImageUrl;
      public @NonNull Builder setMaximumImageUrl(@Nullable String setterArg) {
        this.maximumImageUrl = setterArg;
        return this;
      }
      public @NonNull Images build() {
        Images pigeonReturn = new Images();
        pigeonReturn.setImageUrl(imageUrl);
        pigeonReturn.setSmallImageUrl(smallImageUrl);
        pigeonReturn.setMediumImageUrl(mediumImageUrl);
        pigeonReturn.setLargeImageUrl(largeImageUrl);
        pigeonReturn.setMaximumImageUrl(maximumImageUrl);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("imageUrl", imageUrl);
      toMapResult.put("smallImageUrl", smallImageUrl);
      toMapResult.put("mediumImageUrl", mediumImageUrl);
      toMapResult.put("largeImageUrl", largeImageUrl);
      toMapResult.put("maximumImageUrl", maximumImageUrl);
      return toMapResult;
    }
    static @NonNull Images fromMap(@NonNull Map<String, Object> map) {
      Images pigeonResult = new Images();
      Object imageUrl = map.get("imageUrl");
      pigeonResult.setImageUrl((String)imageUrl);
      Object smallImageUrl = map.get("smallImageUrl");
      pigeonResult.setSmallImageUrl((String)smallImageUrl);
      Object mediumImageUrl = map.get("mediumImageUrl");
      pigeonResult.setMediumImageUrl((String)mediumImageUrl);
      Object largeImageUrl = map.get("largeImageUrl");
      pigeonResult.setLargeImageUrl((String)largeImageUrl);
      Object maximumImageUrl = map.get("maximumImageUrl");
      pigeonResult.setMaximumImageUrl((String)maximumImageUrl);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class FetchAnimeCodec extends StandardMessageCodec {
    public static final FetchAnimeCodec INSTANCE = new FetchAnimeCodec();
    private FetchAnimeCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Aired.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return AnimeListData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return Broadcast.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return Demographic.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return From.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return Image.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return Images.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return Prop.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return Title.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return To.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return Trailer.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Aired) {
        stream.write(128);
        writeValue(stream, ((Aired) value).toMap());
      } else 
      if (value instanceof AnimeListData) {
        stream.write(129);
        writeValue(stream, ((AnimeListData) value).toMap());
      } else 
      if (value instanceof Broadcast) {
        stream.write(130);
        writeValue(stream, ((Broadcast) value).toMap());
      } else 
      if (value instanceof Demographic) {
        stream.write(131);
        writeValue(stream, ((Demographic) value).toMap());
      } else 
      if (value instanceof From) {
        stream.write(132);
        writeValue(stream, ((From) value).toMap());
      } else 
      if (value instanceof Image) {
        stream.write(133);
        writeValue(stream, ((Image) value).toMap());
      } else 
      if (value instanceof Images) {
        stream.write(134);
        writeValue(stream, ((Images) value).toMap());
      } else 
      if (value instanceof Prop) {
        stream.write(135);
        writeValue(stream, ((Prop) value).toMap());
      } else 
      if (value instanceof Title) {
        stream.write(136);
        writeValue(stream, ((Title) value).toMap());
      } else 
      if (value instanceof To) {
        stream.write(137);
        writeValue(stream, ((To) value).toMap());
      } else 
      if (value instanceof Trailer) {
        stream.write(138);
        writeValue(stream, ((Trailer) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface FetchAnime {
    void fetchAnimeList(Result<List<AnimeListData>> result);

    /** The codec used by FetchAnime. */
    static MessageCodec<Object> getCodec() {
      return FetchAnimeCodec.INSTANCE;
    }

    /** Sets up an instance of `FetchAnime` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, FetchAnime api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FetchAnime.fetchAnimeList", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<List<AnimeListData>> resultCallback = new Result<List<AnimeListData>>() {
                public void success(List<AnimeListData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.fetchAnimeList(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
